#pragma checksum "C:\Users\Steve Mackey\mywebsites\CurlingLeagueManager\Pages\Default.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d14854699c5dedf58152fe50a57ccdbb5a573923"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(CurlingLeagueManager.Pages.Pages_Default), @"mvc.1.0.razor-page", @"/Pages/Default.cshtml")]
namespace CurlingLeagueManager.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Steve Mackey\mywebsites\CurlingLeagueManager\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Steve Mackey\mywebsites\CurlingLeagueManager\Pages\_ViewImports.cshtml"
using CurlingLeagueManager;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Steve Mackey\mywebsites\CurlingLeagueManager\Pages\_ViewImports.cshtml"
using CurlingLeagueManager.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d14854699c5dedf58152fe50a57ccdbb5a573923", @"/Pages/Default.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d4607a342267dd015aa29c1750145dc717dd74e9", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Default : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\Steve Mackey\mywebsites\CurlingLeagueManager\Pages\Default.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html lang=\"en\">\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d14854699c5dedf58152fe50a57ccdbb5a5739233685", async() => {
                WriteLiteral("\r\n        <meta charset=\"utf-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \r\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d14854699c5dedf58152fe50a57ccdbb5a5739234782", async() => {
                WriteLiteral("\r\n        <div class=\"container\" style=\"background-color: #bcd4f1; width: 100%\">\r\n    <hgroup class=\"title\">\r\n        <h1>");
#nullable restore
#line 16 "C:\Users\Steve Mackey\mywebsites\CurlingLeagueManager\Pages\Default.cshtml"
       Write(ViewBag.Title);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"</h1>
    </hgroup>
    <div id=""leagueselector"" class=""panel-body""> 
    <p>League Manager is a web based league management tool from which you can create sports leagues, add teams, build schedules and track league results.  To access an existing league, select the league from the table below.  To create a new league, select Admin Tools from the main menu and follow the instructions.</p>
        <ol>
        <li>Select your league by <b>clicking on the league name.</b></li>
        </ol>
           
                <div id=""jqxWidget"">
                <div id=""jqxgrid""></div>
                </div> 
                <div id=""log""></div>
    </div>
</div>
    <div id=""leaguedetail"">
        <div><h2>League Contact</h2></div>
            <div id=""contactjqxWidget"">
                <div id=""contactjqxgrid""></div>
            </div>  
                
        <div><h2>Round 1 Standings</h2></div>
            <div id=""jqxgrid""></div>
        <div><h2>Round 2 Standings</h2></div>
            ");
                WriteLiteral(@"<div id=""jqxgrid2""></div>
         
        <div class=""col-sm-6"">
            <div id=""chartContainer3"" style=""width: 100% ; height: 360px;""></div>
        </div>
        
        <div class=""col-sm-6"">
            <div id='chartContainer1' style=""width: 100% ; height: 180px;""></div>
        
        <div id='chartContainer2' style=""width: 100%; height: 180px;""></div>
        </div>


<div id=""schedule"" >
        <div><h2>Schedule</h2></div>
            <div id=""schedulejqxWidget"">
                <div id=""myPivotGrid"" style=""height: 400px""></div>
                <div style=""margin-top: 30px;"">
                <div id=""cellbegineditevent""></div>
                <div style=""margin-top: 10px;"" id=""cellendeditevent""></div>
                </div>         
            </div>                 
</div>
</div>

    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
</html>
<script>
    $(document).ready(function refreshpage_function() {
        var leaguedetail = $('#leaguedetail');
        leaguedetail.attr('disabled', true)
        document.getElementById(""leaguedetail"").style.visibility = ""hidden"";
        // Build table of all leagues
        var source = {
            datatype: ""json"",
            datafields: [
                                                        { name: 'League_ID', type: 'string' },
                                                        { name: 'League_Name', type: 'string' },
                                                        { name: 'League_Admin', type: 'string' },
                                                        { name: 'League_Admin_Email', type: 'email' },
                                                        { name: 'League_Admin_Phone', type: 'string'}],
            id: 'uid',
            url: '/Services/GetLeague.cshtml/',
            async: true
        };
        var dataAdapter = new $.jqx.dataAd");
            WriteLiteral(@"apter(source);
        $(""#jqxgrid"").jqxGrid({
            width: '100%',
            autoheight: true,
            altrows: true,
            source: dataAdapter,
            selectionmode: 'checkbox',
            selectionmode: 'singlecell',
            columns: [
                                                            { text: 'League', datafield: 'League_Name', width: '20%' },
                                                            { text: 'Contact', datafield: 'League_Admin', width: '20%' },
                                                            { text: 'email', datafield: 'League_Admin_Email', width: '20%' },
                                                            { text: 'Phone', datafield: 'League_Admin_Phone', width: '20%'}]

        });
        // when user clicks on a row for a league get the league information 
        $(""#jqxgrid"").on('cellclick', league_function);

        // league_function is called by selecting a league by clicking on the league row in the le");
            WriteLiteral(@"ague list
        function league_function(event) {
            leaguedetail.attr('disabled', false)
            document.getElementById(""leaguedetail"").style.visibility = ""visible"";
            // event arguments.
            var args = event.args;

            // row's bound index and uid
            var rowBoundIndex = event.args.rowindex;
            var datarow = $(""#jqxgrid"").jqxGrid('getrowdata', rowBoundIndex);
            var leagueuid = datarow.League_ID;
            var selectleague = datarow.League_Name;
            console.log(""Get League ID and League from the selected row"");

            // set the leagueid and league name for add team function
            $(""#addtleague"").val(selectleague);
            $(""#addtleagueid"").val(leagueuid)

            // var selectleague = value
            var selectleague = leagueuid;

            // Get League contact details
            var source = {
                datatype: ""json"",
                datafields: [
                    ");
            WriteLiteral(@"                                        { name: 'League_ID', type: 'string' },
                                                            { name: 'League_Name', type: 'string' },
                                                            { name: 'League_Admin', type: 'string' },
                                                            { name: 'League_Admin_Email', type: 'email' },
                                                            { name: 'League_Admin_Phone', type: 'string'}],
                id: 'League_ID',
                url: '/Services/GetLeagueDetails.cshtml/' + selectleague,
                async: true
            };
            console.log(""Display Contact Grid"");

            var dataAdapter = new $.jqx.dataAdapter(source);
            $(""#contactjqxgrid"").jqxGrid({
                width: '100%',
                autoheight: true,
                altrows: true,
                source: dataAdapter,
                selectionmode: 'checkbox',
                selectionmode");
            WriteLiteral(@": 'singlecell',
                columns: [
                                                            { text: 'League', datafield: 'League_Name', width: '20%' },
                                                            { text: 'Contact', datafield: 'League_Admin', width: '20%' },
                                                            { text: 'email', datafield: 'League_Admin_Email', width: '30%' },
                                                            { text: 'Phone', datafield: 'League_Admin_Phone', width: '20%'}]

            });


            // Get schedule for selected league and show in a pivot grid
            var buildpivot = $.getJSON(""/Services/GetSchedule.cshtml/"" + selectleague, function (data) {
                console.log(""Display the pivot grid"");
                var source =
                                                {
                                                    localdata: data,
                                                    datatype: ""json"",
 ");
            WriteLiteral(@"                                                   datafields:
                                                [
                                                { name: 'Game_ID', type: 'string' },
                                                { name: 'League_ID', type: 'string' },
                                                { name: 'Home_Team_ID', type: 'string' },
                                                { name: 'Away_Team_ID', type: 'string' },
                                                { name: 'Date', type: 'string' },
                                                { name: 'Time', type: 'string' },
                                                { name: 'League_Name', type: 'string' },
                                                { name: 'Home_Team', type: 'string' },
                                                { name: 'Away_Team', type: 'string' },
                                                { name: 'Sheet', type: 'number' },
                                     ");
            WriteLiteral(@"           { name: 'Game_Submit', type: 'string' },
                                                { name: 'Playoff', type: 'string' }
                                                ]
                                                };

                var dataAdapter = new $.jqx.dataAdapter(source);
                dataAdapter.dataBind();

                //console.log(dataAdapter);

                //console.log(""show the dataAdapter"");
                //console.log(dataAdapter);

                var getCellValue = function (row, col) {
                    var currentDateRecords = [];
                    for (i = 0; i < data.length; i++) {
                        if (data[i].Date == row.text && data[i].Sheet == col.parentItem.adapterItem.text) {
                            currentDateRecords.push({ home: data[i].Home_Team, away: data[i].Away_Team });
                        }
                    }
                    console.log(currentDateRecords);
                    return currentDa");
            WriteLiteral(@"teRecords;
                };

                // create a pivot data source from the dataAdapter
                var pivotDataSource = new $.jqx.pivot(
                                                          dataAdapter,
                                                          {
                                                              autoresize: 'false',
                                                              resizable: 'true',
                                                              pivotValuesOnRows: false,
                                                              rows: [
                                                                    { dataField: 'Date', resizable: 'false', height: 30 },
                                                                    { dataField: 'Time', resizable: 'false', height: 30 }
                                                              ],
                                                              columns: [
                    ");
            WriteLiteral(@"                                                { dataField: 'Sheet', align: 'Center' }
                                                              ],
                                                              values: [
                                                                { dataField: 'Home_Team', text: 'Home Team', align: 'Center' },
                                                                { dataField: 'Away_Team', text: 'Away Team', align: 'Center' }
                                                              ]
                                                          }
                                                        );
                var isFirst = true;

                $('#myPivotGrid').jqxPivotGrid(
                                                          {
                                                              source: pivotDataSource,
                                                              treeStyleRows: false,
                               ");
            WriteLiteral(@"                               multipleSelectionEnabled: true,
                                                              scrollBarsEnabled: true,
                                                              selectionEnabled: true,
                                                              autoResize: false,
                                                              cellsRenderer: function (pivotCell) {
                                                                  var row = pivotCell.pivotRow;
                                                                  var col = pivotCell.pivotColumn;

                                                                  var teams = [];
                                                                  var cellText = '';
                                                                  var hasAdditionalText = false;
                                                                  var size = 25;
                                                      ");
            WriteLiteral(@"            if (!!pivotCell.value) {
                                                                      teams = getCellValue(row, col);
                                                                      if (col.text == ""Away Team"") {
                                                                          cellText = teams[0].away;
                                                                          cellText.length > 6 ? hasAdditionalText = true : hasAdditionalText = false;
                                                                          size = 30;
                                                                          //size = Math.round((cellText.length * 2) / 10) * 20;
                                                                      } else {
                                                                          cellText = teams[0].home;
                                                                      }
                                                            ");
            WriteLiteral(@"      }

                                                                  if (isFirst && hasAdditionalText) {
                                                                      isFirst = false;
                                                                      setTimeout(function () {
                                                                          pivotDataSource.rows[0].height = size;
                                                                          pivotDataSource.dataBind();
                                                                          $('#myPivotGrid').jqxPivotGrid({ source: pivotDataSource });
                                                                      }, 500);
                                                                  }

                                                                  return ""<div style='width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;'>"" + cellText + ""</div>"";
                                             ");
            WriteLiteral("                 }\r\n                                                          }\r\n                                        );\r\n            });\r\n\r\n\r\n        };\r\n    });\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Default> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Default> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Default>)PageContext?.ViewData;
        public Pages_Default Model => ViewData.Model;
    }
}
#pragma warning restore 1591
